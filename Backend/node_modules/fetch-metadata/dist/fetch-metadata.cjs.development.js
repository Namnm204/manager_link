'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var UrlPattern = _interopDefault(require('url-pattern'));

var CONFIG_DEFAULTS = {
  allowedFetchSites: ['same-origin', 'same-site', 'none'],
  disallowedNavigationRequests: ['object', 'embed'],
  allowedPaths: [],
  errorStatusCode: 403,
  // @ts-expect-error
  onError: function onError(req, res, next, options) {
    res.statusCode = options.errorStatusCode;
    res.end();
  }
};
var getConfigOptions = function getConfigOptions(config) {
  return Object.assign({}, CONFIG_DEFAULTS, config);
};

var extractHeader = function extractHeader(req, header) {
  var reqHeader = req.headers[header];
  return Array.isArray(reqHeader) ? reqHeader.join(',') : reqHeader || '';
};

var getSecFetchHeaders = function getSecFetchHeaders(req) {
  return {
    secFetchSite: extractHeader(req, 'sec-fetch-site').toLowerCase(),
    secFetchMode: extractHeader(req, 'sec-fetch-mode').toLowerCase(),
    secFetchDest: extractHeader(req, 'sec-fetch-dest').toLowerCase()
  };
};

var isString = function isString(str) {
  return typeof str === 'string';
};

var matchAllowedURL = function matchAllowedURL(list, req) {
  if (!Array.isArray(list)) return false;
  var _req$url = req.url,
      url = _req$url === void 0 ? '' : _req$url,
      _req$method = req.method,
      method = _req$method === void 0 ? '' : _req$method;
  method = method.toUpperCase();
  var match = list.find(function (item) {
    var allowedPath = isString(item) ? {
      path: item
    } : item;

    if (isString(allowedPath.method)) {
      if (allowedPath.method.toUpperCase() !== method) {
        return false;
      }
    }

    var pattern = new UrlPattern(allowedPath.path);
    return !!pattern.match(url);
  });
  return !!match;
};

function fetchMetadata(config) {
  if (config === void 0) {
    config = {};
  }

  var options = getConfigOptions(config);
  return function middleware(req, res, next) {
    var _req$method;

    var _getSecFetchHeaders = getSecFetchHeaders(req),
        secFetchSite = _getSecFetchHeaders.secFetchSite,
        secFetchMode = _getSecFetchHeaders.secFetchMode,
        secFetchDest = _getSecFetchHeaders.secFetchDest; // Backwards compatibility for older browsers not supporting fetch metadata headers


    if (!secFetchSite) {
      return next();
    } // Allow requests from same full- or sub-domain as well as direct navigation


    if (Array.isArray(options.allowedFetchSites) && options.allowedFetchSites.includes(secFetchSite)) {
      return next();
    } // Allow simple top-level navigation and iframing (except for <object> and <embed> nav requests by default)


    if (secFetchMode === 'navigate' && ((_req$method = req.method) === null || _req$method === void 0 ? void 0 : _req$method.toUpperCase()) === 'GET' && Array.isArray(options.disallowedNavigationRequests) && !options.disallowedNavigationRequests.includes(secFetchDest)) {
      return next();
    } // Explicitly allowed paths


    if (matchAllowedURL(options.allowedPaths, req)) {
      return next();
    }

    options.onError(req, res, next, options);
  };
}

module.exports = fetchMetadata;

exports.default = fetchMetadata;
//# sourceMappingURL=fetch-metadata.cjs.development.js.map
