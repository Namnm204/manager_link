{"version":3,"file":"fetch-metadata.cjs.production.min.js","sources":["../src/helpers.ts","../src/fetchMetadata.ts","../src/index.ts"],"sourcesContent":["import UrlPattern from 'url-pattern'\nimport { AllowedPath, Config, Request } from './types'\n\nconst CONFIG_DEFAULTS: Config = {\n  allowedFetchSites: ['same-origin', 'same-site', 'none'],\n  disallowedNavigationRequests: ['object', 'embed'],\n  allowedPaths: [],\n  errorStatusCode: 403,\n  // @ts-expect-error\n  onError: (req, res, next, options) => {\n    res.statusCode = options.errorStatusCode\n    res.end()\n  },\n}\n\nexport const getConfigOptions = (config: Partial<Config>): Config => {\n  return Object.assign({}, CONFIG_DEFAULTS, config)\n}\n\nconst extractHeader = (req: Request, header: string): string => {\n  const reqHeader = req.headers[header]\n  return Array.isArray(reqHeader) ? reqHeader.join(',') : reqHeader || ''\n}\n\nexport const getSecFetchHeaders = (req: Request) => {\n  return {\n    secFetchSite: extractHeader(req, 'sec-fetch-site').toLowerCase(),\n    secFetchMode: extractHeader(req, 'sec-fetch-mode').toLowerCase(),\n    secFetchDest: extractHeader(req, 'sec-fetch-dest').toLowerCase(),\n  }\n}\n\nconst isString = (str: any): str is string => {\n  return typeof str === 'string'\n}\n\nexport const matchAllowedURL = (\n  list: (string | AllowedPath)[],\n  req: Request\n): boolean => {\n  if (!Array.isArray(list)) return false\n\n  let { url = '', method = '' } = req\n\n  method = method.toUpperCase()\n\n  const match = list.find(item => {\n    const allowedPath: AllowedPath = isString(item) ? { path: item } : item\n\n    if (isString(allowedPath.method)) {\n      if (allowedPath.method.toUpperCase() !== method) {\n        return false\n      }\n    }\n\n    const pattern = new UrlPattern(allowedPath.path)\n    return !!pattern.match(url)\n  })\n\n  return !!match\n}\n","import { Config, Request, Response, NextFunction } from './types'\nimport {\n  getConfigOptions,\n  getSecFetchHeaders,\n  matchAllowedURL,\n} from './helpers'\n\nexport function fetchMetadata(config: Partial<Config> = {}) {\n  const options = getConfigOptions(config)\n\n  return function middleware(req: Request, res: Response, next: NextFunction) {\n    const { secFetchSite, secFetchMode, secFetchDest } = getSecFetchHeaders(req)\n\n    // Backwards compatibility for older browsers not supporting fetch metadata headers\n    if (!secFetchSite) {\n      return next()\n    }\n\n    // Allow requests from same full- or sub-domain as well as direct navigation\n    if (\n      Array.isArray(options.allowedFetchSites) &&\n      options.allowedFetchSites.includes(secFetchSite)\n    ) {\n      return next()\n    }\n\n    // Allow simple top-level navigation and iframing (except for <object> and <embed> nav requests by default)\n    if (\n      secFetchMode === 'navigate' &&\n      req.method?.toUpperCase() === 'GET' &&\n      Array.isArray(options.disallowedNavigationRequests) &&\n      !options.disallowedNavigationRequests.includes(secFetchDest)\n    ) {\n      return next()\n    }\n\n    // Explicitly allowed paths\n    if (matchAllowedURL(options.allowedPaths, req)) {\n      return next()\n    }\n\n    options.onError(req, res, next, options)\n  }\n}\n","import { fetchMetadata } from './fetchMetadata'\nexport { Config } from './types'\n\nmodule.exports = fetchMetadata\nexport default fetchMetadata\n"],"names":["CONFIG_DEFAULTS","allowedFetchSites","disallowedNavigationRequests","allowedPaths","errorStatusCode","onError","req","res","next","options","statusCode","end","extractHeader","header","reqHeader","headers","Array","isArray","join","isString","str","fetchMetadata","config","Object","assign","getConfigOptions","secFetchSite","toLowerCase","secFetchMode","secFetchDest","getSecFetchHeaders","includes","method","toUpperCase","list","url","find","item","allowedPath","path","UrlPattern","match","matchAllowedURL","module","exports"],"mappings":"sJAGMA,EAA0B,CAC9BC,kBAAmB,CAAC,cAAe,YAAa,QAChDC,6BAA8B,CAAC,SAAU,SACzCC,aAAc,GACdC,gBAAiB,IAEjBC,QAAS,SAACC,EAAKC,EAAKC,EAAMC,GACxBF,EAAIG,WAAaD,EAAQL,gBACzBG,EAAII,QAQFC,EAAgB,SAACN,EAAcO,OAC7BC,EAAYR,EAAIS,QAAQF,UACvBG,MAAMC,QAAQH,GAAaA,EAAUI,KAAK,KAAOJ,GAAa,IAWjEK,EAAW,SAACC,SACM,iBAARA,YC1BAC,EAAcC,YAAAA,IAAAA,EAA0B,QAChDb,EDOwB,SAACa,UACxBC,OAAOC,OAAO,GAAIxB,EAAiBsB,GCR1BG,CAAiBH,UAE1B,SAAoBhB,EAAcC,EAAeC,WDcxB,SAACF,SAC1B,CACLoB,aAAcd,EAAcN,EAAK,kBAAkBqB,cACnDC,aAAchB,EAAcN,EAAK,kBAAkBqB,cACnDE,aAAcjB,EAAcN,EAAK,kBAAkBqB,eCjBEG,CAAmBxB,GAAhEoB,IAAAA,aAAcE,IAAAA,aAAcC,IAAAA,oBAG/BH,EAMHV,MAAMC,QAAQR,EAAQR,oBACtBQ,EAAQR,kBAAkB8B,SAASL,IAOlB,aAAjBE,GAC8B,mBAA9BtB,EAAI0B,6BAAQC,gBACZjB,MAAMC,QAAQR,EAAQP,gCACrBO,EAAQP,6BAA6B6B,SAASF,IDKtB,SAC7BK,EACA5B,OAEKU,MAAMC,QAAQiB,GAAO,OAAO,QAED5B,EAA1B6B,IAAAA,aAAM,OAAoB7B,EAAhB0B,OAAAA,aAAS,YAEzBA,EAASA,EAAOC,gBAEFC,EAAKE,MAAK,SAAAC,OAChBC,EAA2BnB,EAASkB,GAAQ,CAAEE,KAAMF,GAASA,UAE/DlB,EAASmB,EAAYN,SACnBM,EAAYN,OAAOC,gBAAkBD,IAK3B,IAAIQ,EAAWF,EAAYC,MAC1BE,MAAMN,OCnBnBO,CAAgBjC,EAAQN,aAAcG,GAdjCE,SAkBTC,EAAQJ,QAAQC,EAAKC,EAAKC,EAAMC,GA1BvBD,KCZbmC,OAAOC,QAAUvB"}